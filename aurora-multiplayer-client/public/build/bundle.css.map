{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\ContinueGame.svelte",
    "..\\..\\Home.svelte",
    "..\\..\\Loader.svelte",
    "..\\..\\NewGame.svelte",
    "..\\..\\PlayTurn.svelte",
    "..\\..\\header.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\t//Variables that this component accepts\r\n  export let gameName         //Stores the games name\r\n  export let currentUsername  //Stores the username of the currently logged in user\r\n  export let screen           //Stores the current screem\r\n  export let gameData         //Stores the parsed multiplayer.config file\r\n  export let currentTurn      //Stores the username of which players turn it currently is\r\n  export let shortestWarp     //Stores the string version of the shortest voted-for warp\r\n  export let isUsersTurn      //If it is the currently logged in users turn or not\r\n\r\n\t//Import the needed node modules\r\n\tvar path = require('path')\r\n\tvar multiplayer = require(path.resolve(__dirname, \"../src/multiplayer\"))\r\n\tconst { dialog } = require('electron').remote\r\n\r\n\t//Import the needed components\r\n  import {Button, Form, FormGroup, Label, Input} from \"sveltestrap\"\r\n\timport Header from \"./header.svelte\"\r\n  import Loader from './Loader.svelte'\r\n\r\n\tcurrentTurn = \"\"\r\n\tshortestWarp = \"\"\r\n\tisUsersTurn = false\r\n\tlet warpType \r\n\tlet warpTypeNum      //An integer representing a warp length. See multiplayer.js for more info\r\n\tlet warpLength\r\n\tlet spinnerText = \"\" //Stores the text to display under the spinner while loading\r\n  let loading = false  //Toggles the loading overlay\r\n\t\r\n\t//Downloads a game, reguardless of if it is the currently signed in users turn. When it is finally their turn and they run pullGame() to start their turn, the db will be overwritten\r\n  async function downloadGame() {\r\n\t\tconsole.log(\"Pulling game\")\r\n\t\tlet inGame = true\r\n\t\tlet error = false\r\n\t\tisUsersTurn = true\r\n\t\tloading = true\r\n\t\tspinnerText = \"Downloading db...\"\r\n\t\tawait multiplayer.downloadGame(gameName)\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log(err)\r\n\t\t\tdialog.showMessageBox(null, {\r\n\t\t\t\ttype: \"error\",\r\n\t\t\t\tbuttons: [\"OK\"],\r\n\t\t\t\ttitle: \"Error\",\r\n\t\t\t\tmessage: \"Game does not exist\"\r\n\t\t\t})\r\n\t\t\terror = true\r\n\t\t\tloading = false\r\n\t\t})\r\n\t\tif(error) return\r\n\t\tloading = false\r\n\t\tdialog.showMessageBox(null, {\r\n\t\t\ttype: \"info\",\r\n\t\t\tbuttons: [\"OK\"],\r\n\t\t\ttitle: \"Download complete\",\r\n\t\t\tmessage: `Download of ${gameName} complete.`\r\n\t\t})\r\n\t}\r\n\t\t\r\n  //Downloads the db and json file from S3 and makes sure that the user is in the game\r\n\tasync function pullGame() {\r\n\t\tconsole.log(\"Pulling game\")\r\n\t\tlet inGame = true\r\n\t\tisUsersTurn = true\r\n\t\tloading = true\r\n\t\tspinnerText = \"Downloading db...\"\r\n\t\tgameData = await multiplayer.getConfig(gameName)\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log(err)\r\n\t\t\tdialog.showMessageBox(null, {\r\n\t\t\t\ttype: \"error\",\r\n\t\t\t\tbuttons: [\"OK\"],\r\n\t\t\t\ttitle: \"Error\",\r\n\t\t\t\tmessage: \"Game does not exist\"\r\n\t\t\t})\r\n\t\t\tloading = false\r\n\t\t\treturn\r\n\t\t})\r\n\t\tawait multiplayer.pullGame(gameName, currentUsername)\r\n\t\t.catch(err => {\r\n\t\t\t//We don't need to error out here if the user is in the game, but it is not their turn\r\n\t\t\tif(err != \"Not your turn\") {\r\n\t\t\t\tdialog.showMessageBox(null, {\r\n\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\tbuttons: [\"OK\"],\r\n\t\t\t\t\ttitle: \"Error\",\r\n\t\t\t\t\tmessage: err\r\n\t\t\t\t})\r\n\t\t\t\tinGame = false\r\n\t\t\t} else {\r\n\t\t\t\tisUsersTurn = false\r\n\t\t\t}\r\n\t\t})\r\n\t\tloading = false\r\n\t\tif(gameData && inGame) {\r\n      screen = \"play turn\"\r\n      console.log(screen)\r\n\t\t\tgameName = gameData.gameName\r\n\t\t\tcurrentTurn = gameData.currentTurn\r\n\r\n\t\t\tlet shortestType = 10\r\n\r\n\t\t\t//Gotta make sure that each vote is smaller than the starting value\r\n\t\t\tlet shortestWarpSecs = Number.MAX_VALUE\r\n\t\t\tlet warpType = \"\"\r\n\t\t\tlet length = 0\r\n\r\n\t\t\tconsole.log(gameData.warpVotes)\r\n\t\t\tfor(let vote of gameData.warpVotes) {\r\n\t\t\t\tlet warpSeconds = 0\r\n\r\n\t\t\t\t//Convert the vote into seconds so it can be compared\r\n\t\t\t\tswitch(vote.type) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\twarpSeconds = vote.length\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\twarpSeconds = vote.length * 60\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\twarpSeconds = vote.length * 3600\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\twarpSeconds = vote.length * 86400\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 5:\r\n\t\t\t\t\t\twarpSeconds = vote.length * 604800\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\twarpSeconds = vote.length * 2592000\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\twarpSeconds = vote.length * 31556926\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(warpSeconds < shortestWarpSecs) {\r\n\t\t\t\t\tconsole.log(warpSeconds)\r\n\t\t\t\t\tshortestWarpSecs = warpSeconds\r\n\t\t\t\t\tlength = vote.length\r\n\t\t\t\t\tshortestType = vote.type\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twarpTypeNum = shortestType\r\n\t\t\tswitch(shortestType) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\twarpType = \"Seconds\"\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\twarpType = \"Minutes\"\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\twarpType = \"Hours\"\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\twarpType = \"Days\"\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\twarpType = \"Weeks\"\r\n\t\t\t\t\tbrea\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\twarpType = \"Months\"\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\twarpType = \"Years\"\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n      shortestWarp = length + \" \" + warpType\r\n\r\n\t\t\t//Check if it is the game creators turn\r\n\t\t\tif(isUsersTurn && gameData.currentTurn == gameData.users[0]) {\r\n        console.log(isUsersTurn)\r\n\t\t\t\tdialog.showMessageBox(null, {\r\n\t\t\t\t\ttype: \"info\",\r\n\t\t\t\t\tbuttons: [\"OK\"],\r\n\t\t\t\t\ttitle: \"New round\",\r\n\t\t\t\t\tmessage: `New round, please warp forwards ${length} ${warpType} before making your turn`\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<main>\r\n  <Loader spinnerText={spinnerText} loading={loading}></Loader>\r\n  <Header text=\"Continue Game\"/>\r\n  <Form>\r\n    <FormGroup>\r\n      <Label>Game Name</Label>\r\n      <Input bind:value={gameName}/>\r\n    </FormGroup>\r\n    <FormGroup>\r\n      <Label>Username</Label>\r\n      <Input bind:value={currentUsername}/>\r\n    </FormGroup>\r\n    <div class=\"button-group-horizontal-center\">\r\n      <Button color=\"success\" type=\"button\" on:click={pullGame}>Continue</Button>\r\n      <Button color=\"warning\" type=\"button\" on:click={downloadGame}>Download Game</Button>\r\n    </div>\r\n  </Form>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tpadding: 1em;\r\n\t\tmax-width: 240px;\r\n\t\tmargin: 0 auto;\r\n\t\tmin-height: 100%;\r\n\t\tcolor: white;\r\n\t\tbackground: #203A43;\r\n\t}\r\n\r\n\t.button-group-horizontal-center {\r\n\t\tmargin-top: 10px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\tjustify-content: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n</style>",
    "<script>\r\n  import Header from \"./header.svelte\"\r\n  import {Button} from \"sveltestrap\"\r\n\r\n  export let screen\r\n\r\n  //Changes the page to the \"New Game\" page\r\n\tfunction newGamePage() {\r\n\t\tscreen = \"new game\"\r\n\t}\r\n\t//Changes the page to the \"Continue Game\" page\r\n\tfunction continueGamePage() {\r\n\t\tscreen = \"continue game\"\r\n\t}\r\n</script>\r\n\r\n<main>\r\n  <Header text=\"Aurora Multiplayer\"/>\r\n  <div class=\"button-group\">\r\n    <Button type=\"button\" color=\"primary\" on:click={newGamePage}>New Game</Button>\r\n    <Button type=\"button\" color=\"secondary\" on:click={continueGamePage}>Continue Existing Game</Button>\r\n  </div>\r\n</main>\r\n\r\n<style>\r\nmain {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 1em;\r\n  max-width: 240px;\r\n  margin: 0 auto;\r\n  min-height: 100%;\r\n  color: white;\r\n  background: #203A43;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n  main {\r\n    max-width: none;\r\n  }\r\n}\r\n</style>",
    "<script>\r\n  import Spinner from '../node_modules/svelte-spinner'\r\n  export let spinnerText\r\n\texport let loading\r\n</script>\r\n\r\n{#if loading}\r\n  <div class=\"spinner-container\">\r\n    <Spinner size=\"100\" speed=\"750\" color=\"#ff6c52\" thickness=\"3\" gap=\"40\"></Spinner>\r\n    <p class=\"spinner-text\">{spinnerText}</p>\r\n  </div>\r\n{/if}\r\n\r\n<style>\r\n  .spinner-container {\r\n\t\tposition: absolute;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tbackground: rgba(0, 0, 0, 0.8);\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tz-index: 100;\r\n\t}\r\n\t.spinner-text {\r\n\t\tcolor: white;\r\n\t\tfont-size: 5vh;\r\n\t\tmargin: 5px;\r\n\t\tz-index: 101;\r\n\t}\r\n</style>",
    "<script>\r\n  //Variables that this component accepts\r\n  export let gameName         //Stores the games name\r\n  export let numNewGameUsers  //The number of users to be added to a new game (controls how many inputs are visible)\r\n  export let newGameUsers     //An array to store the usernames when creating a new game\r\n  export let screen           //This sets the current screen of the app. Value can be \"home\", \"new game\", \"continue game\", or \"play turn\"\r\n\r\n  //Import the needed node modules\r\n  var path = require('path')\r\n  var multiplayer = require(path.resolve(__dirname, \"../src/multiplayer\"))\r\n\tconst { dialog } = require('electron').remote\r\n\r\n\t//Import the needed components\r\n  import Header from \"./header.svelte\"\r\n  import Loader from './Loader.svelte'\r\n  import {Button, Form, FormGroup, Label, Input} from \"sveltestrap\"\r\n\r\n  let spinnerText = \"\" //Stores the text to display under the spinner while loading\r\n  let loading = false  //Toggles the loading overlay\r\n\r\n  //Increments the number of users while creating a new game\r\n\tfunction incrementUsers() {\r\n\t\tnumNewGameUsers ++\r\n\t}\r\n\r\n\t//Decrements the number of users while creating a new game\r\n\tfunction decrementUsers() {\r\n\t\tnumNewGameUsers --\r\n  }\r\n  \r\n  //Uploads the db and game json file to S3\r\n\tasync function uploadGame() {\r\n\t\tloading = true\r\n\t\tspinnerText = \"Creating Game...\"\r\n\t\tconsole.log(`Users: ${newGameUsers}`)\r\n    let success = await multiplayer.uploadGame(gameName, newGameUsers)\r\n\t\tconsole.log(success)\r\n\t\tif(success) {\r\n\t\t\tloading = false\r\n\t\t\tdialog.showMessageBox(null, {\r\n        type: \"info\",\r\n        buttons: [\"OK\"],\r\n        title: \"Success!\",\r\n        message: `Successfully uploaded db file`\r\n\t\t\t})\r\n      screen = \"home\"\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<main>\r\n  <Loader spinnerText={spinnerText} loading={loading}></Loader>\r\n  <Header text=\"New Game\"/>\r\n  <Form style=\"margin-top: 70px;\">\r\n    <FormGroup>\r\n      <Label>Game Name</Label>\r\n      <Input id=\"gameNameInput\" bind:value = {gameName}/>\r\n    </FormGroup>\r\n    \r\n    <FormGroup>\r\n      <Label>Users to be added to game</Label>\r\n      {#each Array(numNewGameUsers) as _, i}\r\n        <Input placeholder=\"username\" bind:value={newGameUsers[i]}/>\r\n      {/each}\r\n    </FormGroup>\r\n    <div class=\"button-group\">\r\n      <Button color=\"primary\" type=\"button\" id=\"addUserBtn\" on:click={incrementUsers}>Add User</Button>\r\n      <Button color=\"danger\" type=\"button\" id=\"addUserBtn\" on:click={decrementUsers}>Remove User</Button>\r\n    </div>\r\n    <div class=\"button-group-horizontal-center\">\r\n      <Button color=\"success\" type=\"button\" on:click={uploadGame}>Create Game</Button>\r\n    </div>\r\n  </Form>\r\n</main>\r\n\r\n<style>\r\n  main {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 1em;\r\n    max-width: 240px;\r\n    margin: 0 auto;\r\n    min-height: 100%;\r\n    color: white;\r\n    background: #203A43;\r\n  }\r\n\r\n  .button-group {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .button-group-horizontal-center {\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    width: 100%;\r\n  }\r\n\r\n  @media (min-width: 640px) {\r\n    main {\r\n      max-width: none;\r\n    }\r\n  }\r\n</style>",
    "<script>\r\n\t//Variables that this component accepts\r\n  export let screen           //Stores the current screem\r\n  export let gameName         //Stores the games name\r\n  export let currentTurn      //Stores the username of which players turn it currently is\r\n  export let currentUsername  //Stores the username of the currently logged in user\r\n  export let shortestWarp     //Stores the string version of the shortest voted-for warp\r\n\texport let isUsersTurn      //If it is the currently logged in users turn or not\r\n\t\r\n\t//Import the needed node modules\r\n  var path = require('path')\r\n\tvar multiplayer = require(path.resolve(__dirname, \"../src/multiplayer\"))\r\n\tconst { dialog } = require('electron').remote\r\n\r\n\t//Import the needed components\r\n\timport {Button, Form, FormGroup, Label, Input} from \"sveltestrap\"\r\n\timport Header from \"./header.svelte\"\r\n  import Loader from './Loader.svelte'\r\n\r\n\tlet spinnerText = \"\" //Stores the text to display under the spinner while loading\r\n\tlet loading = false  //Toggles the loading overlay\r\n\tlet warpTypeNum      //An integer representing a warp length. See multiplayer.js for more info\r\n\tlet warpType\r\n\tlet warpLength\r\n\r\n\t//Records the users vote to multiplayer.config, and uploads that and AuroraDB.db to the S3 bucket\r\n  async function submitTurn() {\r\n    console.log(currentUsername)\r\n\t\tloading = true\r\n\t\tspinnerText = \"Uploading db...\"\r\n\t\tconsole.log(warpType)\r\n\t\tswitch(warpType) {\r\n\t\t\tcase \"seconds\":\r\n\t\t\t\twarpTypeNum = 1\r\n\t\t\t\tbreak\r\n\t\t\tcase \"minutes\":\r\n\t\t\t\twarpTypeNum = 2\r\n\t\t\t\tbreak\r\n\t\t\tcase \"hours\":\r\n\t\t\t\twarpTypeNum = 3\r\n\t\t\t\tbreak\r\n\t\t\tcase \"days\":\r\n\t\t\t\twarpTypeNum = 4\r\n\t\t\t\tbreak\r\n\t\t\tcase \"weeks\":\r\n\t\t\t\twarpTypeNum = 5\r\n\t\t\t\tbreak\r\n\t\t\tcase \"months\":\r\n\t\t\t\twarpTypeNum = 6\r\n\t\t\t\tbreak\r\n\t\t\tcase \"years\":\r\n\t\t\t\twarpTypeNum = 7\r\n\t\t\t\tbreak\r\n    }\r\n    console.log(currentUsername)\r\n\t\tlet nextPlayer = await multiplayer.submitTurn(gameName, currentUsername, {type: warpTypeNum, length: warpLength, madeBy: currentUsername})\r\n\t\tloading = false\r\n\t\tdialog.showMessageBox(null, {\r\n\t\t\ttype: \"info\",\r\n\t\t\tbuttons: [\"OK\"],\r\n\t\t\ttitle: \"Turn Complete\",\r\n\t\t\tmessage: `Turn complete! It is now ${nextPlayer}'s turn.`\r\n\t\t})\r\n\t\tscreen = \"home\"\r\n\t}\r\n</script>\r\n\r\n<main>\r\n  <Loader spinnerText={spinnerText} loading={loading}></Loader>\r\n  <Header text=\"Play Turn\"/>\r\n  <div class=\"horiz-table\">\r\n    <div class=\"horiz-table-header\">\r\n      <div class=\"table-header-cell\">Game Name</div>\r\n      <div class=\"table-header-cell\">Current Turn</div>\r\n      <div class=\"table-header-cell\">Next Warp Length</div>\r\n    </div>\r\n    <div class=\"horiz-table-col\">\r\n      <div class=\"table-cell\">{gameName}</div>\r\n      <div class=\"table-cell\">{currentTurn}</div>\r\n      <div class=\"table-cell\">{shortestWarp}</div>\r\n    </div>\r\n  </div>\r\n  <Label style=\"margin-bottom:2px;margin-top:20px;\">How long would you like to warp?</Label>\r\n  <div class=\"button-group-horizontal-center\" style=\"width:300px;margin-top:0;\">\r\n    <Input type=\"text\" bind:value={warpLength}/>\r\n    <Input type=\"select\" bind:value={warpType}>\r\n     <!--><option default>type</option><-->\r\n      <option value=\"seconds\">Seconds</option>\r\n      <option value=\"minutes\">Minutes</option>\r\n      <option value=\"hours\">Hours</option>\r\n      <option value=\"days\">Days</option>\r\n      <option value=\"weeks\">Weeks</option>\r\n      <option value=\"months\">Months</option>\r\n      <option value=\"years\">Years</option>\r\n    </Input>\r\n  </div>\r\n  <div class=\"button-group-horizontal-center\">\r\n    <Button type=\"button\" color=\"success\" disabled={!isUsersTurn} on:click={submitTurn}>Submit Turn</Button>\r\n  </div>\r\n</main>\r\n\r\n<style>\r\n  main {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tpadding: 1em;\r\n\t\tmax-width: 240px;\r\n\t\tmargin: 0 auto;\r\n\t\tmin-height: 100%;\r\n\t\tcolor: white;\r\n\t\tbackground: #203A43;\r\n\t}\r\n\r\n\t.button-group-horizontal-center {\r\n\t\tmargin-top: 10px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\tjustify-content: center;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.horiz-table {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\tborder-radius: 10px;\r\n\t\tbox-shadow: 3px 3px 5px rgba(0, 0, 0, 0.6);\r\n\t}\r\n\r\n\t.horiz-table-header {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.table-header-cell {\r\n\t\tbackground: #37a2c2;\r\n\t\tfont-size: 1.5em;\r\n\t\ttext-align: right;\r\n\t\tpadding: 7px;\r\n\t}\r\n\r\n\t.table-header-cell:nth-child(odd) {\r\n\t\tbackground: #48acca !important;\r\n\t}\r\n\r\n\t.table-header-cell:first-child {\r\n\t\tborder-top-left-radius: 10px;\r\n\t}\r\n\r\n\t.table-header-cell:last-child {\r\n\t\tborder-bottom-left-radius: 10px;\r\n\t}\r\n\r\n\t.horiz-table-col {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.table-cell {\r\n\t\tbackground: rgb(235, 235, 235);\r\n\t\tcolor: rgb(68, 68, 68);\r\n\t\tfont-size: 1.5em;\r\n\t\ttext-align: left;\r\n\t\tpadding: 7px;\r\n\t}\r\n\r\n\t.table-cell:nth-child(odd) {\r\n\t\tbackground: whitesmoke;\r\n\t}\r\n\r\n\t.table-cell:first-child {\r\n\t\tborder-top-right-radius: 10px;\r\n\t}\r\n\r\n\t.table-cell:last-child {\r\n\t\tborder-bottom-right-radius: 10px;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n</style>",
    "<script>\r\n  export let text\r\n</script>\r\n\r\n<h1>{text}</h1>\r\n\r\n<style>\r\n  h1 {\r\n    position: absolute;\r\n    top: 10px;\r\n\t\tcolor: #3eb7db;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 3.5em;\r\n\t\tfont-weight: 100;\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}